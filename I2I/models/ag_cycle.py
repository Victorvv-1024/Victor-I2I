import torch
import itertools

from .networks import define_G, define_D
from .base_model import BaseModel
from .losses import GANLoss
from utils.imagepool import ImagePool


class AG_Cycle(BaseModel):
    def __init__(self, opt):
        BaseModel.__init__(self, opt)
        self.opt = opt
        self.loss_names = ['D_A', 'G_A', 'cycle_A', 'D_B', 'G_B', 'cycle_B', 'pix_A', 'pix_B', 'reg_A', 'reg_B']
        
        if self.opt.isTrain:
            self.model_names = ['G_A', 'G_B', 'D_A', 'D_B']
        else:  # during test time, only load Gs
            self.model_names = ['G_A', 'G_B']
            
        self.netG_A = define_G(opt.input_nc, opt.output_nc, opt.ngf, opt.netG, opt.normG, not opt.no_dropout, opt.init_type, opt.init_gain, opt.antialias, opt.antialias_up, opt)
        self.netG_B = define_G(opt.input_nc, opt.output_nc, opt.ngf, opt.netG, opt.normG, not opt.no_dropout, opt.init_type, opt.init_gain, opt.antialias, opt.antialias_up, opt)
        
        if self.opt.isTrain:  # define discriminators
            self.netD_A = define_D(opt.output_nc, opt.ndf, opt.netD, opt.n_layers_D, opt.normD, opt.init_type, opt.init_gain, opt.antialias, opt)
            self.netD_B = define_D(opt.output_nc, opt.ndf, opt.netD, opt.n_layers_D, opt.normD, opt.init_type, opt.init_gain, opt.antialias, opt)
            
            self.fake_A_pool = ImagePool(opt.pool_size)  # create image buffer to store previously generated images
            self.fake_B_pool = ImagePool(opt.pool_size)  # create image buffer to store previously generated images
            
            # define loss functions
            self.criterionGAN = GANLoss().to(self.device)
            self.criterionCycle = torch.nn.L1Loss()
            self.criterionIdt = torch.nn.L1Loss()
            self.criterionPix = torch.nn.L1Loss()
            
            # initialize optimizers; schedulers will be automatically created by function <BaseModel.setup>.
            self.optimizer_G = torch.optim.Adam(itertools.chain(self.netG_A.parameters(), self.netG_B.parameters()), lr=opt.lr, betas=(opt.beta1, 0.999))
            self.optimizer_D = torch.optim.Adam(itertools.chain(self.netD_A.parameters(), self.netD_B.parameters()), lr=opt.lr, betas=(opt.beta1, 0.999))

            self.optimizers.append(self.optimizer_G)
            self.optimizers.append(self.optimizer_D)
    
    def set_input(self, input):
        """fetch input data from the dataloader
        Parameters:
            input (): include the data itself.
        """
        # A is the source and B is the target
        A, B = input
        _, self.real_A = A
        self.real_B = B
        """attach to the device"""
        self.real_A = self.real_A.to(self.device)
        self.real_B = self.real_B.to(self.device)
    
    def forward(self):
        """Run forward pass; called by both functions <optimize_parameters> and <test>."""
        # forward cycle
        self.fake_B, self.mask_B, self.temp_B = self.netG_A(self.real_A) # G_A(A)
        self.rec_A, _, _ = self.netG_B(self.fake_B) # G_B(G_A(A))

        # backward cycle
        self.fake_A, self.mask_A, self.temp_A = self.netG_B(self.real_B) # G_B(B)
        self.rec_B, _, _ = self.netG_A(self.fake_A) # G_A(G_B(B))
    
    def backward_D_basic(self, netD, real, fake):
        """Calculate GAN loss for the discriminator
        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake (tensor array) -- images generated by a generator
        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.
        """
        # Real
        pred_real = netD(real)
        loss_D_real = self.criterionGAN(pred_real, True)
        # Fake
        pred_fake = netD(fake.detach())
        loss_D_fake = self.criterionGAN(pred_fake, False)
        # Combined loss and calculate gradients
        loss_D = (loss_D_real + loss_D_fake) * 0.25
        loss_D.backward()
        return loss_D
    
    def backward_D_A(self):
        """Calculate GAN loss for discriminator D_A"""
        fake_B = self.fake_B_pool.query(self.fake_B)
        self.loss_D_A = self.backward_D_basic(self.netD_A, self.real_B, fake_B)
    
    def backward_D_B(self):
        """Calculate GAN loss for discriminator D_B"""
        fake_A = self.fake_A_pool.query(self.fake_A)
        self.loss_D_B = self.backward_D_basic(self.netD_B, self.real_A, fake_A)
    
    def backward_G(self, epoch):
        """Calculate the loss for generators G_A and G_B"""
        lambda_pixel = self.opt.lambda_pixel
        lambda_reg = self.opt.lambda_reg
        lambda_A = self.opt.lambda_A
        lambda_B = self.opt.lambda_B
        lambda_idt = self.opt.lambda_identity

        # Identity loss
        if lambda_idt > 0:
            # G_A should be identity if real_B is fed: ||G_A(B) - B||
            self.idt_A,_,_ = self.netG_A(self.real_B)
            self.loss_idt_A = self.criterionIdt(self.idt_A, self.real_B) * lambda_B * lambda_idt
            # G_B should be identity if real_A is fed: ||G_B(A) - A||
            self.idt_B,_,_ = self.netG_B(self.real_A)
            self.loss_idt_B = self.criterionIdt(self.idt_B, self.real_A) * lambda_A * lambda_idt
        else:
            self.loss_idt_A = 0
            self.loss_idt_B = 0
        self.loss_idt = self.loss_idt_A + self.loss_idt_B
        
        # GAN loss D_A(G_A(A))
        self.loss_G_A = self.criterionGAN(self.netD_A(self.fake_B), True)
        # GAN loss D_B(G_B(B))
        self.loss_G_B = self.criterionGAN(self.netD_B(self.fake_A), True)
        self.loss_GAN = self.loss_G_A + self.loss_G_B
        
        # Forward cycle loss || G_B(G_A(A)) - A||
        self.loss_cycle_A = self.criterionCycle(self.rec_A, self.real_A) * lambda_A
        # Backward cycle loss || G_A(G_B(B)) - B||
        self.loss_cycle_B = self.criterionCycle(self.rec_B, self.real_B) * lambda_B
        self.loss_cycle = self.loss_cycle_A + self.loss_cycle_B
        
        # pixel loss
        self.loss_pix_A = self.criterionPix(self.fake_B, self.real_A)*lambda_pixel
        self.loss_pix_B = self.criterionPix(self.fake_A, self.real_B)*lambda_pixel
        self.loss_pix = self.loss_pix_A + self.loss_pix_B

        
        # attention loss
        self.loss_reg_A = lambda_reg * (
                torch.sum(torch.abs(self.mask_A[:, :, :, :-1] - self.mask_A[:, :, :, 1:])) +
                torch.sum(torch.abs(self.mask_A[:, :, :-1, :] - self.mask_A[:, :, 1:, :])))

        self.loss_reg_B = lambda_reg * (
                torch.sum(torch.abs(self.mask_B[:, :, :, :-1] - self.mask_B[:, :, :, 1:])) +
                torch.sum(torch.abs(self.mask_B[:, :, :-1, :] - self.mask_B[:, :, 1:, :])))
        self.loss_reg = self.loss_reg_A + self.loss_reg_B
        
        # Total loss
        if epoch < self.opt.gan_curriculum:
            rate = self.opt.starting_rate
        else:
            rate = self.opt.default_rate
        
        # combined loss and calculate gradients
        self.loss_G = (self.loss_GAN*0.5 + self.loss_reg)*(1.-rate) + (self.loss_cycle + self.loss_idt)*rate

        self.loss_G.backward()
    
    def data_dependent_initialize(self, data):
        return
    
    def optimize_parameters(self, epoch):
        """Calculate losses, gradients, and update network weights; called in every training iteration"""
        # forward
        self.forward()      # compute fake images and reconstruction images.

        # G_A and G_B
        self.set_requires_grad([self.netD_A, self.netD_B], False)  # Ds require no gradients when optimizing Gs
        self.optimizer_G.zero_grad()  # set G_A and G_B's gradients to zero
        self.backward_G(epoch)             # calculate gradients for G_A and G_B
        self.optimizer_G.step()       # update G_A and G_B's weights

        # D_A and D_B
        self.set_requires_grad([self.netD_A, self.netD_B], True)
        self.optimizer_D.zero_grad()   # set D_A and D_B's gradients to zero
        self.backward_D_A()      # calculate gradients for D_A
        self.backward_D_B()      # calculate graidents for D_B
        self.optimizer_D.step()  # update D_A and D_B's weight

        